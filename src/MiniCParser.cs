//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Usuario/IdeaProjects/Gramarr/MiniCParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MiniCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, WHILE=5, FOR=6, BREAK=7, RETURN=8, READ=9, 
		WRITE=10, NEW=11, TRUE=12, FALSE=13, INT=14, CHAR=15, DOUBLE=16, BOOL=17, 
		STRING=18, ASSIGN=19, EQEQ=20, NOTEQ=21, LESS=22, LESSEQ=23, GREATER=24, 
		GREATEREQ=25, ADD=26, SUB=27, MUL=28, DIV=29, MOD=30, INCREMENT=31, DECREMENT=32, 
		OR=33, AND=34, LPAREN=35, RPAREN=36, LBRACE=37, RBRACE=38, LBRACK=39, 
		RBRACK=40, SEMICOLON=41, COMMA=42, DOT=43, INTCONST=44, DOUBLECONST=45, 
		CHARCONST=46, STRINGCONST=47, ID=48, COMMENT=49, LINE_COMMENT=50, WS=51;
	public const int
		RULE_program = 0, RULE_classDecl = 1, RULE_classBody = 2, RULE_classMember = 3, 
		RULE_varDecl = 4, RULE_methodDecl = 5, RULE_paramList = 6, RULE_param = 7, 
		RULE_type = 8, RULE_stmt = 9, RULE_block = 10, RULE_exprStmt = 11, RULE_ifStmt = 12, 
		RULE_whileStmt = 13, RULE_forStmt = 14, RULE_returnStmt = 15, RULE_breakStmt = 16, 
		RULE_readStmt = 17, RULE_writeStmt = 18, RULE_expr = 19, RULE_assignExpr = 20, 
		RULE_orExpr = 21, RULE_andExpr = 22, RULE_eqExpr = 23, RULE_relExpr = 24, 
		RULE_addExpr = 25, RULE_mulExpr = 26, RULE_unaryExpr = 27, RULE_primary = 28, 
		RULE_location = 29, RULE_methodCall = 30, RULE_argList = 31, RULE_literal = 32;
	public static readonly string[] ruleNames = {
		"program", "classDecl", "classBody", "classMember", "varDecl", "methodDecl", 
		"paramList", "param", "type", "stmt", "block", "exprStmt", "ifStmt", "whileStmt", 
		"forStmt", "returnStmt", "breakStmt", "readStmt", "writeStmt", "expr", 
		"assignExpr", "orExpr", "andExpr", "eqExpr", "relExpr", "addExpr", "mulExpr", 
		"unaryExpr", "primary", "location", "methodCall", "argList", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'while'", "'for'", "'break'", 
		"'return'", "'read'", "'write'", "'new'", "'true'", "'false'", "'int'", 
		"'char'", "'double'", "'bool'", "'string'", "'='", "'=='", "'!='", "'<'", 
		"'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", 
		"'||'", "'&&'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", 
		"'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "WHILE", "FOR", "BREAK", "RETURN", 
		"READ", "WRITE", "NEW", "TRUE", "FALSE", "INT", "CHAR", "DOUBLE", "BOOL", 
		"STRING", "ASSIGN", "EQEQ", "NOTEQ", "LESS", "LESSEQ", "GREATER", "GREATEREQ", 
		"ADD", "SUB", "MUL", "DIV", "MOD", "INCREMENT", "DECREMENT", "OR", "AND", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMICOLON", 
		"COMMA", "DOT", "INTCONST", "DOUBLECONST", "CHARCONST", "STRINGCONST", 
		"ID", "COMMENT", "LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniCParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 66;
				classDecl();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CLASS );
			State = 71;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCParser.RBRACE, 0); }
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_classDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(CLASS);
			State = 74;
			Match(ID);
			State = 75;
			Match(LBRACE);
			State = 76;
			classBody();
			State = 77;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberContext[] classMember() {
			return GetRuleContexts<ClassMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberContext classMember(int i) {
			return GetRuleContext<ClassMemberContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 4, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281474977218564L) != 0)) {
				{
				{
				State = 79;
				classMember();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl() {
			return GetRuleContext<MethodDeclContext>(0);
		}
		public ClassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterClassMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitClassMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberContext classMember() {
		ClassMemberContext _localctx = new ClassMemberContext(Context, State);
		EnterRule(_localctx, 6, RULE_classMember);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				varDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				methodDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			type();
			State = 90;
			Match(ID);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 91;
				Match(ASSIGN);
				State = 92;
				expr();
				}
			}

			State = 95;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(MiniCParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case CHAR:
			case DOUBLE:
			case BOOL:
			case STRING:
			case ID:
				{
				State = 97;
				type();
				}
				break;
			case VOID:
				{
				State = 98;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 101;
			Match(ID);
			State = 102;
			Match(LPAREN);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281474977218560L) != 0)) {
				{
				State = 103;
				paramList();
				}
			}

			State = 106;
			Match(RPAREN);
			State = 107;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCParser.COMMA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 12, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			param();
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 110;
				Match(COMMA);
				State = 111;
				param();
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 14, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			type();
			State = 118;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MiniCParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(MiniCParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MiniCParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MiniCParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MiniCParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 281474977218560L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprStmtContext exprStmt() {
			return GetRuleContext<ExprStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStmtContext breakStmt() {
			return GetRuleContext<BreakStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadStmtContext readStmt() {
			return GetRuleContext<ReadStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_stmt);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				varDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 124;
				exprStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 125;
				ifStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 126;
				whileStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 127;
				forStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 128;
				returnStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 129;
				breakStmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 130;
				readStmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 131;
				writeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(LBRACE);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 547735233624040L) != 0)) {
				{
				{
				State = 135;
				stmt();
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 141;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterExprStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitExprStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprStmtContext exprStmt() {
		ExprStmtContext _localctx = new ExprStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_exprStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 545398770905088L) != 0)) {
				{
				State = 143;
				expr();
				}
			}

			State = 146;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniCParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniCParser.ELSE, 0); }
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(IF);
			State = 149;
			Match(LPAREN);
			State = 150;
			expr();
			State = 151;
			Match(RPAREN);
			State = 152;
			stmt();
			State = 155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 153;
				Match(ELSE);
				State = 154;
				stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniCParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_whileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(WHILE);
			State = 158;
			Match(LPAREN);
			State = 159;
			expr();
			State = 160;
			Match(RPAREN);
			State = 161;
			stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniCParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprStmtContext[] exprStmt() {
			return GetRuleContexts<ExprStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprStmtContext exprStmt(int i) {
			return GetRuleContext<ExprStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_forStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(FOR);
			State = 164;
			Match(LPAREN);
			State = 165;
			exprStmt();
			State = 166;
			exprStmt();
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 545398770905088L) != 0)) {
				{
				State = 167;
				expr();
				}
			}

			State = 170;
			Match(RPAREN);
			State = 171;
			stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniCParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_returnStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(RETURN);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 545398770905088L) != 0)) {
				{
				State = 174;
				expr();
				}
			}

			State = 177;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MiniCParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		public BreakStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterBreakStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitBreakStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStmtContext breakStmt() {
		BreakStmtContext _localctx = new BreakStmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_breakStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(BREAK);
			State = 180;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MiniCParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocationContext location() {
			return GetRuleContext<LocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		public ReadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterReadStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitReadStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadStmtContext readStmt() {
		ReadStmtContext _localctx = new ReadStmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_readStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(READ);
			State = 183;
			Match(LPAREN);
			State = 184;
			location();
			State = 185;
			Match(RPAREN);
			State = 186;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MiniCParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_writeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(WRITE);
			State = 189;
			Match(LPAREN);
			State = 190;
			expr();
			State = 191;
			Match(RPAREN);
			State = 192;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext assignExpr() {
			return GetRuleContext<AssignExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 38, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			assignExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocationContext location() {
			return GetRuleContext<LocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		public AssignExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterAssignExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitAssignExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignExprContext assignExpr() {
		AssignExprContext _localctx = new AssignExprContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignExpr);
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196;
				location();
				State = 197;
				Match(ASSIGN);
				State = 198;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200;
				orExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(MiniCParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(MiniCParser.OR, i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(Context, State);
		EnterRule(_localctx, 42, RULE_orExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			andExpr();
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 204;
				Match(OR);
				State = 205;
				andExpr();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqExprContext[] eqExpr() {
			return GetRuleContexts<EqExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqExprContext eqExpr(int i) {
			return GetRuleContext<EqExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MiniCParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MiniCParser.AND, i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(Context, State);
		EnterRule(_localctx, 44, RULE_andExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			eqExpr();
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 212;
				Match(AND);
				State = 213;
				eqExpr();
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelExprContext[] relExpr() {
			return GetRuleContexts<RelExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelExprContext relExpr(int i) {
			return GetRuleContext<RelExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQEQ() { return GetTokens(MiniCParser.EQEQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQ(int i) {
			return GetToken(MiniCParser.EQEQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOTEQ() { return GetTokens(MiniCParser.NOTEQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQ(int i) {
			return GetToken(MiniCParser.NOTEQ, i);
		}
		public EqExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eqExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterEqExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitEqExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqExprContext eqExpr() {
		EqExprContext _localctx = new EqExprContext(Context, State);
		EnterRule(_localctx, 46, RULE_eqExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			relExpr();
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EQEQ || _la==NOTEQ) {
				{
				{
				State = 220;
				_la = TokenStream.LA(1);
				if ( !(_la==EQEQ || _la==NOTEQ) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 221;
				relExpr();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS() { return GetTokens(MiniCParser.LESS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS(int i) {
			return GetToken(MiniCParser.LESS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESSEQ() { return GetTokens(MiniCParser.LESSEQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQ(int i) {
			return GetToken(MiniCParser.LESSEQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER() { return GetTokens(MiniCParser.GREATER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER(int i) {
			return GetToken(MiniCParser.GREATER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATEREQ() { return GetTokens(MiniCParser.GREATEREQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQ(int i) {
			return GetToken(MiniCParser.GREATEREQ, i);
		}
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterRelExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitRelExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		RelExprContext _localctx = new RelExprContext(Context, State);
		EnterRule(_localctx, 48, RULE_relExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			addExpr();
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 62914560L) != 0)) {
				{
				{
				State = 228;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 62914560L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 229;
				addExpr();
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulExprContext[] mulExpr() {
			return GetRuleContexts<MulExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulExprContext mulExpr(int i) {
			return GetRuleContext<MulExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(MiniCParser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(MiniCParser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUB() { return GetTokens(MiniCParser.SUB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB(int i) {
			return GetToken(MiniCParser.SUB, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(Context, State);
		EnterRule(_localctx, 50, RULE_addExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			mulExpr();
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADD || _la==SUB) {
				{
				{
				State = 236;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUB) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 237;
				mulExpr();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext[] unaryExpr() {
			return GetRuleContexts<UnaryExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr(int i) {
			return GetRuleContext<UnaryExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(MiniCParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(MiniCParser.MUL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(MiniCParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(MiniCParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(MiniCParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(MiniCParser.MOD, i);
		}
		public MulExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterMulExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitMulExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulExprContext mulExpr() {
		MulExprContext _localctx = new MulExprContext(Context, State);
		EnterRule(_localctx, 52, RULE_mulExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			unaryExpr();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1879048192L) != 0)) {
				{
				{
				State = 244;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1879048192L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 245;
				unaryExpr();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MiniCParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(MiniCParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(MiniCParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(MiniCParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(Context, State);
		EnterRule(_localctx, 54, RULE_unaryExpr);
		int _la;
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case SUB:
			case INCREMENT:
			case DECREMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 6643777536L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 252;
				unaryExpr();
				}
				break;
			case TRUE:
			case FALSE:
			case LPAREN:
			case INTCONST:
			case DOUBLECONST:
			case CHARCONST:
			case STRINGCONST:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 253;
				primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocationContext location() {
			return GetRuleContext<LocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCParser.RPAREN, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 56, RULE_primary);
		try {
			State = 263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257;
				location();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 258;
				methodCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 259;
				Match(LPAREN);
				State = 260;
				expr();
				State = 261;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(MiniCParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(MiniCParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(MiniCParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(MiniCParser.RBRACK, i);
		}
		public LocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_location; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationContext location() {
		LocationContext _localctx = new LocationContext(Context, State);
		EnterRule(_localctx, 58, RULE_location);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			Match(ID);
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 266;
				Match(LBRACK);
				State = 267;
				expr();
				State = 268;
				Match(RBRACK);
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 60, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(ID);
			State = 276;
			Match(LPAREN);
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 545398770905088L) != 0)) {
				{
				State = 277;
				argList();
				}
			}

			State = 280;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 62, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			expr();
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 283;
				Match(COMMA);
				State = 284;
				expr();
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTCONST() { return GetToken(MiniCParser.INTCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECONST() { return GetToken(MiniCParser.DOUBLECONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARCONST() { return GetToken(MiniCParser.CHARCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGCONST() { return GetToken(MiniCParser.STRINGCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MiniCParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MiniCParser.FALSE, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCParserListener typedListener = listener as IMiniCParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCParserVisitor<TResult> typedVisitor = visitor as IMiniCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 64, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 263882790678528L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,51,293,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,4,0,68,8,0,11,0,12,0,69,1,
		0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,5,2,81,8,2,10,2,12,2,84,9,2,1,3,1,3,
		3,3,88,8,3,1,4,1,4,1,4,1,4,3,4,94,8,4,1,4,1,4,1,5,1,5,3,5,100,8,5,1,5,
		1,5,1,5,3,5,105,8,5,1,5,1,5,1,5,1,6,1,6,1,6,5,6,113,8,6,10,6,12,6,116,
		9,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,133,
		8,9,1,10,1,10,5,10,137,8,10,10,10,12,10,140,9,10,1,10,1,10,1,11,3,11,145,
		8,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,156,8,12,1,13,1,
		13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,3,14,169,8,14,1,14,1,14,
		1,14,1,15,1,15,3,15,176,8,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,
		17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,
		20,1,20,3,20,202,8,20,1,21,1,21,1,21,5,21,207,8,21,10,21,12,21,210,9,21,
		1,22,1,22,1,22,5,22,215,8,22,10,22,12,22,218,9,22,1,23,1,23,1,23,5,23,
		223,8,23,10,23,12,23,226,9,23,1,24,1,24,1,24,5,24,231,8,24,10,24,12,24,
		234,9,24,1,25,1,25,1,25,5,25,239,8,25,10,25,12,25,242,9,25,1,26,1,26,1,
		26,5,26,247,8,26,10,26,12,26,250,9,26,1,27,1,27,1,27,3,27,255,8,27,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,3,28,264,8,28,1,29,1,29,1,29,1,29,1,29,5,
		29,271,8,29,10,29,12,29,274,9,29,1,30,1,30,1,30,3,30,279,8,30,1,30,1,30,
		1,31,1,31,1,31,5,31,286,8,31,10,31,12,31,289,9,31,1,32,1,32,1,32,0,0,33,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,0,7,2,0,14,18,48,48,1,0,20,21,1,0,22,25,1,0,26,
		27,1,0,28,30,2,0,26,27,31,32,2,0,12,13,44,47,294,0,67,1,0,0,0,2,73,1,0,
		0,0,4,82,1,0,0,0,6,87,1,0,0,0,8,89,1,0,0,0,10,99,1,0,0,0,12,109,1,0,0,
		0,14,117,1,0,0,0,16,120,1,0,0,0,18,132,1,0,0,0,20,134,1,0,0,0,22,144,1,
		0,0,0,24,148,1,0,0,0,26,157,1,0,0,0,28,163,1,0,0,0,30,173,1,0,0,0,32,179,
		1,0,0,0,34,182,1,0,0,0,36,188,1,0,0,0,38,194,1,0,0,0,40,201,1,0,0,0,42,
		203,1,0,0,0,44,211,1,0,0,0,46,219,1,0,0,0,48,227,1,0,0,0,50,235,1,0,0,
		0,52,243,1,0,0,0,54,254,1,0,0,0,56,263,1,0,0,0,58,265,1,0,0,0,60,275,1,
		0,0,0,62,282,1,0,0,0,64,290,1,0,0,0,66,68,3,2,1,0,67,66,1,0,0,0,68,69,
		1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,71,1,0,0,0,71,72,5,0,0,1,72,1,1,
		0,0,0,73,74,5,1,0,0,74,75,5,48,0,0,75,76,5,37,0,0,76,77,3,4,2,0,77,78,
		5,38,0,0,78,3,1,0,0,0,79,81,3,6,3,0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,
		1,0,0,0,82,83,1,0,0,0,83,5,1,0,0,0,84,82,1,0,0,0,85,88,3,8,4,0,86,88,3,
		10,5,0,87,85,1,0,0,0,87,86,1,0,0,0,88,7,1,0,0,0,89,90,3,16,8,0,90,93,5,
		48,0,0,91,92,5,19,0,0,92,94,3,38,19,0,93,91,1,0,0,0,93,94,1,0,0,0,94,95,
		1,0,0,0,95,96,5,41,0,0,96,9,1,0,0,0,97,100,3,16,8,0,98,100,5,2,0,0,99,
		97,1,0,0,0,99,98,1,0,0,0,100,101,1,0,0,0,101,102,5,48,0,0,102,104,5,35,
		0,0,103,105,3,12,6,0,104,103,1,0,0,0,104,105,1,0,0,0,105,106,1,0,0,0,106,
		107,5,36,0,0,107,108,3,20,10,0,108,11,1,0,0,0,109,114,3,14,7,0,110,111,
		5,42,0,0,111,113,3,14,7,0,112,110,1,0,0,0,113,116,1,0,0,0,114,112,1,0,
		0,0,114,115,1,0,0,0,115,13,1,0,0,0,116,114,1,0,0,0,117,118,3,16,8,0,118,
		119,5,48,0,0,119,15,1,0,0,0,120,121,7,0,0,0,121,17,1,0,0,0,122,133,3,20,
		10,0,123,133,3,8,4,0,124,133,3,22,11,0,125,133,3,24,12,0,126,133,3,26,
		13,0,127,133,3,28,14,0,128,133,3,30,15,0,129,133,3,32,16,0,130,133,3,34,
		17,0,131,133,3,36,18,0,132,122,1,0,0,0,132,123,1,0,0,0,132,124,1,0,0,0,
		132,125,1,0,0,0,132,126,1,0,0,0,132,127,1,0,0,0,132,128,1,0,0,0,132,129,
		1,0,0,0,132,130,1,0,0,0,132,131,1,0,0,0,133,19,1,0,0,0,134,138,5,37,0,
		0,135,137,3,18,9,0,136,135,1,0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,
		139,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,142,5,38,0,0,142,21,1,
		0,0,0,143,145,3,38,19,0,144,143,1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,
		0,146,147,5,41,0,0,147,23,1,0,0,0,148,149,5,3,0,0,149,150,5,35,0,0,150,
		151,3,38,19,0,151,152,5,36,0,0,152,155,3,18,9,0,153,154,5,4,0,0,154,156,
		3,18,9,0,155,153,1,0,0,0,155,156,1,0,0,0,156,25,1,0,0,0,157,158,5,5,0,
		0,158,159,5,35,0,0,159,160,3,38,19,0,160,161,5,36,0,0,161,162,3,18,9,0,
		162,27,1,0,0,0,163,164,5,6,0,0,164,165,5,35,0,0,165,166,3,22,11,0,166,
		168,3,22,11,0,167,169,3,38,19,0,168,167,1,0,0,0,168,169,1,0,0,0,169,170,
		1,0,0,0,170,171,5,36,0,0,171,172,3,18,9,0,172,29,1,0,0,0,173,175,5,8,0,
		0,174,176,3,38,19,0,175,174,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,
		178,5,41,0,0,178,31,1,0,0,0,179,180,5,7,0,0,180,181,5,41,0,0,181,33,1,
		0,0,0,182,183,5,9,0,0,183,184,5,35,0,0,184,185,3,58,29,0,185,186,5,36,
		0,0,186,187,5,41,0,0,187,35,1,0,0,0,188,189,5,10,0,0,189,190,5,35,0,0,
		190,191,3,38,19,0,191,192,5,36,0,0,192,193,5,41,0,0,193,37,1,0,0,0,194,
		195,3,40,20,0,195,39,1,0,0,0,196,197,3,58,29,0,197,198,5,19,0,0,198,199,
		3,38,19,0,199,202,1,0,0,0,200,202,3,42,21,0,201,196,1,0,0,0,201,200,1,
		0,0,0,202,41,1,0,0,0,203,208,3,44,22,0,204,205,5,33,0,0,205,207,3,44,22,
		0,206,204,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,
		43,1,0,0,0,210,208,1,0,0,0,211,216,3,46,23,0,212,213,5,34,0,0,213,215,
		3,46,23,0,214,212,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,
		0,0,217,45,1,0,0,0,218,216,1,0,0,0,219,224,3,48,24,0,220,221,7,1,0,0,221,
		223,3,48,24,0,222,220,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,
		1,0,0,0,225,47,1,0,0,0,226,224,1,0,0,0,227,232,3,50,25,0,228,229,7,2,0,
		0,229,231,3,50,25,0,230,228,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,
		233,1,0,0,0,233,49,1,0,0,0,234,232,1,0,0,0,235,240,3,52,26,0,236,237,7,
		3,0,0,237,239,3,52,26,0,238,236,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,
		0,240,241,1,0,0,0,241,51,1,0,0,0,242,240,1,0,0,0,243,248,3,54,27,0,244,
		245,7,4,0,0,245,247,3,54,27,0,246,244,1,0,0,0,247,250,1,0,0,0,248,246,
		1,0,0,0,248,249,1,0,0,0,249,53,1,0,0,0,250,248,1,0,0,0,251,252,7,5,0,0,
		252,255,3,54,27,0,253,255,3,56,28,0,254,251,1,0,0,0,254,253,1,0,0,0,255,
		55,1,0,0,0,256,264,3,64,32,0,257,264,3,58,29,0,258,264,3,60,30,0,259,260,
		5,35,0,0,260,261,3,38,19,0,261,262,5,36,0,0,262,264,1,0,0,0,263,256,1,
		0,0,0,263,257,1,0,0,0,263,258,1,0,0,0,263,259,1,0,0,0,264,57,1,0,0,0,265,
		272,5,48,0,0,266,267,5,39,0,0,267,268,3,38,19,0,268,269,5,40,0,0,269,271,
		1,0,0,0,270,266,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,
		0,273,59,1,0,0,0,274,272,1,0,0,0,275,276,5,48,0,0,276,278,5,35,0,0,277,
		279,3,62,31,0,278,277,1,0,0,0,278,279,1,0,0,0,279,280,1,0,0,0,280,281,
		5,36,0,0,281,61,1,0,0,0,282,287,3,38,19,0,283,284,5,42,0,0,284,286,3,38,
		19,0,285,283,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,
		63,1,0,0,0,289,287,1,0,0,0,290,291,7,6,0,0,291,65,1,0,0,0,25,69,82,87,
		93,99,104,114,132,138,144,155,168,175,201,208,216,224,232,240,248,254,
		263,272,278,287
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
